(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{588:function(t,e,n){"use strict";n.r(e);var a=n(6),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("p",[t._v("Javascript 的变量是松散类型的，它可以存储 Javascript 支持的任何数据类型，其变量的类型可以在运行时被动态改变。")]),t._v(" "),n("p",[t._v("正因为 Javascript 中变量类型具有动态性，在程序实际执行的过程中就需要用到类型转换的概念。类型转换可以分为隐式转换和显式转换，所谓隐 式转换即程序在运行时进行的自动转换，显式转换则是人为的对类型进行强制转换。")]),t._v(" "),n("blockquote",[n("p",[t._v("Javascript 提供了以下转型函数：\n转换为数值类型：Number(mix)、parseInt(string,radix)、parseFloat(string)\n转换为字符串类型：toString(radix)、String(mix)\n转换为布尔类型：Boolean(mix)")])]),t._v(" "),n("ul",[n("li",[t._v("Number(mix)函数，可以将任意类型的参数 mix 转换为数值类型。其规则为：")])]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("  Boolean->Number : true,false --\x3e 1,0\n  Number->Number : 返回其本身\n  undefined->Number : undefined --\x3e NaN\n  String->Number :\n    + 如果字符串中只包含数字，则将其转换为十进制（忽略前导0）\n    + 如果字符串中包含有效的浮点格式，将其转换为浮点数值（忽略前导0）\n    + 如果是空字符串，将其转换为0\n    + 如果字符串中包含非以上格式，则将其转换为NaN\n    + 如果是对象，则调用对象的valueOf()方法，然后依据前面的规则转换返回的值。如果转换的结果是NaN，则调用对象的toString()方法，再次依照前面的规则转换返回的字符串值。\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br")])]),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("下表列出了对象的valueOf()的返回值：\n")])])]),n("table",[n("thead",[n("tr",[n("th",[t._v("对象")]),t._v(" "),n("th",{staticStyle:{"text-align":"center"}},[t._v("返回值")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("Array")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("数组的元素被转换为字符串，这些字符串由逗号分隔，连接在一起。其操作与 Array.toString 和 Array.join 方法相同。")])]),t._v(" "),n("tr",[n("td",[t._v("Boolean")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("Boolean 值。")])]),t._v(" "),n("tr",[n("td",[t._v("Date")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("存储的时间是从 1970 年 1 月 1 日午夜开始计的毫秒数 UTC。")])]),t._v(" "),n("tr",[n("td",[t._v("Function")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("函数本身。")])]),t._v(" "),n("tr",[n("td",[t._v("Number")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("数字值。")])]),t._v(" "),n("tr",[n("td",[t._v("Object")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("对象本身。这是默认情况。")])]),t._v(" "),n("tr",[n("td",[t._v("String")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("字符串值。")])])])]),t._v(" "),n("ul",[n("li",[t._v("parseInt(string, radix)函数，将字符串转换为整数类型的数值。它也有一定的规则：")])]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v(" 忽略字符串前面的空格，直至找到第一个非空字符\n 如果第一个字符不是数字符号或者负号，返回NaN\n 如果第一个字符是数字，则继续解析直至字符串解析完毕或者遇到一个非数字符号为止\n 如果上步解析的结果以0开头，则将其当作八进制来解析；如果以0x开头，则将其当作十六进制来解析\n 如果指定radix参数，则以radix为基数进行解析\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br")])]),n("ul",[n("li",[t._v("parseFloat(string)函数，将字符串转换为浮点数类型的数值。")])]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("  它的规则与parseInt基本相同，但也有点区别：\n  字符串中第一个小数点符号是有效的，另外parseFloat会忽略所有前导0，如果字符串包含一个可解析为整数的数，则返回整数值而不是浮点数值。\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br")])]),n("ul",[n("li",[t._v("toString(radix)方法。除 undefined 和 null 之外的所有类型的值都具有 toString()方法，其作用是返回对象的字符串表示。")])]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("对象")]),t._v(" "),n("th",{staticStyle:{"text-align":"center"}},[t._v("操作")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("Array")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("将 Array 的元素转换为字符串。结果字符串由逗号分隔，且连接起来。")])]),t._v(" "),n("tr",[n("td",[t._v("Boolean")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("如果 Boolean 值是 true，则返回 “true”。否则，返回 “false”。")])]),t._v(" "),n("tr",[n("td",[t._v("Date")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("返回日期的文字表示法。")])]),t._v(" "),n("tr",[n("td",[t._v("Error")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("返回一个包含相关错误信息的字符串。")])]),t._v(" "),n("tr",[n("td",[t._v("Function")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("返回如下格式的字符串，其中 functionname 是被调用 toString 方法函数的名称：")])]),t._v(" "),n("tr",[n("td",[t._v("function")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("functionname( ) { [native code] }")])]),t._v(" "),n("tr",[n("td",[t._v("Number")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("返回数字的文字表示。")])]),t._v(" "),n("tr",[n("td",[t._v("String")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("返回 String 对象的值。")])])])]),t._v(" "),n("p",[t._v("默认 返回 “[object objectname]”，其中 objectname 是对象类型的名称。")]),t._v(" "),n("ul",[n("li",[t._v("String(mix)函数，将任何类型的值转换为字符串，其规则为：")])]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("如果有toString()方法，则调用该方法（不传递radix参数）并返回结果\n如果是null，返回”null”\n如果是undefined，返回”undefined”\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])]),n("ul",[n("li",[t._v("Boolean(mix)函数，将任何类型的值转换为布尔值。")])]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('以下值会被转换为false：fals* ”"、0、NaN、null、undefined，其余任何值都会被转换为true。\n')])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br")])])])}),[],!1,null,null,null);e.default=s.exports}}]);