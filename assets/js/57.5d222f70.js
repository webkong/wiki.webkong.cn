(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{608:function(a,t,s){"use strict";s.r(t);var e=s(6),n=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("p",[a._v("table 库是由一些辅助函数构成的，这些函数将 table 作为数组来操作。")]),a._v(" "),s("h4",{attrs:{id:"下标从-1-开始"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#下标从-1-开始"}},[a._v("#")]),a._v(" 下标从 1 开始")]),a._v(" "),s("p",[a._v("在 Lua 中，数组下标从 1 开始计数。\n官方解释：Lua lists have a base index of 1 because it was thought to be most friendly for non-programmers, as it makes indices correspond to ordinal element positions.\n确实，对于我们数数来说，总是从 1 开始数的，而从 0 开始对于描述偏移量这样的东西有利。 而 Lua 最初设计是一种类似 XML 的数据描述语言，所以索引（index）反应的是数据在里面的位置，而不是偏移量。\n在初始化一个数组的时候，若不显式地用键值对方式赋值，则会默认用数字作为下标，从 1 开始。由于在 Lua 内部实际采用哈希表和数组分别保存键值对、普通值，所以不推荐混合使用这两种赋值方式。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('local color={first="red", "blue", third="green", "yellow"}\nprint(color["first"])                 --\x3e output: red\nprint(color[1])                       --\x3e output: blue\nprint(color["third"])                 --\x3e output: green\nprint(color[2])                       --\x3e output: yellow\nprint(color[3])                       --\x3e output: nil\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br")])]),s("p",[a._v("从其他语言过来的开发者会觉得比较坑的一点是，当我们把 table 当作栈或者队列使用的时候，容易犯错，追加到 table 的末尾用的是 "),s("code",[a._v("s[#s+1] = something")]),a._v("，而不是 "),s("code",[a._v("s[#s] = something")]),a._v("，而且如果这个 something 是一个 nil 的话，会导致这一次压栈（或者入队列）没有存入任何东西，"),s("code",[a._v("#s")]),a._v("的值没有变。如果 "),s("code",[a._v("s = { 1, 2, 3, 4, 5, 6 }")]),a._v("，你令"),s("code",[a._v("s[4] = nil")]),a._v("，"),s("code",[a._v("#s")]),a._v(" 会令你“匪夷所思”地变成 "),s("code",[a._v("3")])]),a._v(" "),s("h4",{attrs:{id:"table-getn-获取长度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#table-getn-获取长度"}},[a._v("#")]),a._v(" table.getn 获取长度")]),a._v(" "),s("p",[a._v("取长度操作符写作一元操作 #。 字符串的长度是它的字节数（就是以一个字符一个字节计算的字符串长度）。\n对于常规的数组，里面从 1 到 n 放着一些非空的值的时候， 它的长度就精确的为 n，即最后一个值的下标。 如果数组有一个“空洞” （就是说，nil 值被夹在非空值之间）， 那么 #t 可能是指向任何一个是 nil 值的前一个位置的下标 （就是说，任何一个 nil 值都有可能被当成数组的结束）。这也就说明对于有“空洞”的情况，table 的长度存在一定的 不可确定性。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('local tblTest1 = { 1, a = 2, 3 }\nprint("Test1 " .. table.getn(tblTest1))\n\nlocal tblTest2 = { 1, nil }\nprint("Test2 " .. table.getn(tblTest2))\n\nlocal tblTest3 = { 1, nil, 2 }\nprint("Test3 " .. table.getn(tblTest3))\n\nlocal tblTest4 = { 1, nil, 2, nil }\nprint("Test4 " .. table.getn(tblTest4))\n\nlocal tblTest5 = { 1, nil, 2, nil, 3, nil }\nprint("Test5 " .. table.getn(tblTest5))\n\nlocal tblTest6 = { 1, nil, 2, nil, 3, nil, 4, nil }\nprint("Test6 " .. table.getn(tblTest6))\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br")])]),s("p",[a._v("我们使用 Lua 5.1 和 LuaJIT 2.1 分别执行这个用例，结果如下：")]),a._v(" "),s("p",[a._v("$ lua test.lua\nTest1 2\nTest2 1\nTest3 3\nTest4 1\nTest5 3\nTest6 1\n$ luajit test.lua\nTest1 2\nTest2 1\nTest3 1\nTest4 1\nTest5 1\nTest6 1")]),a._v(" "),s("p",[a._v("这一段的输出结果，就是这么 匪夷所思。请问，你以后还敢在 lua 的 table 中用 nil 值吗？如果你继续往后面加 nil，你可能会发现点什么。你可能认为你发现的是个规律。但是，你千万不要认为这是个规律，因为这是错误的。\n不要在 lua 的 table 中使用 nil 值，如果一个元素要删除，直接 remove，不要用 nil 去代替。")]),a._v(" "),s("h4",{attrs:{id:"table-concat-table-sep-i-j"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#table-concat-table-sep-i-j"}},[a._v("#")]),a._v(" table.concat (table [, sep [, i [, j ] ] ])")]),a._v(" "),s("p",[a._v("对于元素是 string 或者 number 类型的表 table，返回 table[i]..sep..table[i+1] ··· sep..table[j] 连接成的字符串。填充字符串 sep 默认为空白字符串。起始索引位置 i 默认为 1，结束索引位置 j 默认是 table 的长度。如果 i 大于 j，返回一个空字符串。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('local a = {1, 3, 5, "hello" }\nprint(table.concat(a))              -- output: 135hello\nprint(table.concat(a, "|"))         -- output: 1|3|5|hello\nprint(table.concat(a, " ", 4, 2))   -- output:\nprint(table.concat(a, " ", 2, 4))   -- output: 3 5 hello\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("h4",{attrs:{id:"table-insert-table-pos-value"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#table-insert-table-pos-value"}},[a._v("#")]),a._v(" table.insert (table, [pos ,] value)")]),a._v(" "),s("p",[a._v("在（数组型）表 table 的 pos 索引位置插入 value，其它元素向后移动到空的地方。pos 的默认值是表的长度加一，即默认是插在表的最后。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("local a = {1, 8}             --a[1] = 1,a[2] = 8\ntable.insert(a, 1, 3)   --在表索引为1处插入3\nprint(a[1], a[2], a[3])\ntable.insert(a, 10)    --在表的最后插入10\nprint(a[1], a[2], a[3], a[4])\n\n--\x3eoutput\n3    1    8\n3    1    8    10\n\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br")])]),s("h4",{attrs:{id:"table-maxn-table"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#table-maxn-table"}},[a._v("#")]),a._v(" table.maxn (table)")]),a._v(" "),s("p",[a._v("返回（数组型）表 table 的最大索引编号；如果此表没有正的索引编号，返回 0。\n当长度省略时，此函数通常需要 O(n) 的时间复杂度来计算 table 的末尾。因此用这个函数省略索引位置的调用形式来作 table 元素的末尾追加，是高代价操作。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("local a = {}\na[-1] = 10\nprint(table.maxn(a))\na[5] = 10\nprint(table.maxn(a))\n\n--\x3eoutput\n0\n5\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br")])]),s("p",[a._v("此函数的行为不同于 # 运算符，因为 # 可以返回数组中任意一个 nil 空洞或最后一个 nil 之前的元素索引。当然，该函数的开销相比 # 运算符也会更大一些。")]),a._v(" "),s("h4",{attrs:{id:"table-remove-table-pos"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#table-remove-table-pos"}},[a._v("#")]),a._v(" table.remove (table [, pos])")]),a._v(" "),s("p",[a._v("在表 table 中删除索引为 pos（pos 只能是 number 型）的元素，并返回这个被删除的元素，它后面所有元素的索引值都会减一。pos 的默认值是表的长度，即默认是删除表的最后一个元素。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("local a = { 1, 2, 3, 4}\nprint(table.remove(a, 1)) --删除速索引为1的元素\nprint(a[1], a[2], a[3], a[4])\n\nprint(table.remove(a))   --删除最后一个元素\nprint(a[1], a[2], a[3], a[4])\n\n--\x3eoutput\n1\n2    3    4    nil\n4\n2    3    nil    nil\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br")])]),s("h4",{attrs:{id:"table-sort-table-comp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#table-sort-table-comp"}},[a._v("#")]),a._v(" table.sort (table [, comp])")]),a._v(" "),s("p",[a._v("按照给定的比较函数 comp 给表 table 排序，也就是从 table[1] 到 table[n] ，这里 n 表示 table 的长度。 比较函数有两个参数，如果希望第一个参数排在第二个的前面，就应该返回 true，否则返回 false。 如果比较函数 comp 没有给出，默认从小到大排序。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("local function compare(x, y) --从大到小排序\n   return x > y         --如果第一个参数大于第二个就返回true，否则返回false\nend\n\nlocal a = { 1, 7, 3, 4, 25}\ntable.sort(a)           --默认从小到大排序\nprint(a[1], a[2], a[3], a[4], a[5])\ntable.sort(a, compare) --使用比较函数进行排序\nprint(a[1], a[2], a[3], a[4], a[5])\n\n--\x3eoutput\n1    3    4    7    25\n25    7    4    3    1\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br")])]),s("h4",{attrs:{id:"table-其他非常有用的函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#table-其他非常有用的函数"}},[a._v("#")]),a._v(" table 其他非常有用的函数")]),a._v(" "),s("p",[a._v("LuaJIT 2.1 新增加的 table.new 和 table.clear 函数是非常有用的。前者主要用来预分配 lua table 空间，后者主要用来高效的释放 table 空间，并且它们都是可以被 JIT 编译的。具体可以参考一下 OpenResty 捆绑的 lua-resty-* 库，里面有些实例可以作为参考。")]),a._v(" "),s("h4",{attrs:{id:"原文"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原文"}},[a._v("#")]),a._v(" 原文")]),a._v(" "),s("p",[s("a",{attrs:{href:"https://moonbingbing.gitbooks.io/openresty-best-practices/content/lua/table_library.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://moonbingbing.gitbooks.io/openresty-best-practices/content/lua/table_library.html"),s("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=n.exports}}]);